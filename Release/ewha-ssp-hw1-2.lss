
ewha-ssp-hw1-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000892  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000009  00800200  00800200  00000906  2**0
                  ALLOC
  2 .debug_aranges 000000f8  00000000  00000000  00000906  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000201  00000000  00000000  000009fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000f7b  00000000  00000000  00000bff  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000541  00000000  00000000  00001b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000d6e  00000000  00000000  000020bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000150  00000000  00000000  00002e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000038f  00000000  00000000  00002f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000057c  00000000  00000000  0000330b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d0  00000000  00000000  00003887  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
   0:	0c 94 02 01 	jmp	0x204	; 0x204 <__ctors_end>
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
   4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
   8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  28:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  38:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  40:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  50:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  5c:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__vector_23>
  60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  64:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  68:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  6c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  70:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  74:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  78:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  7c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  80:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  84:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  88:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  8c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  90:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  94:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  98:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  9c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

000000e4 <port_to_mode_PGM>:
  e4:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
  f4:	01 01 00 00 04 01 07 01 0a 01                       ..........

000000fe <port_to_output_PGM>:
  fe:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
 10e:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000118 <port_to_input_PGM>:
 118:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
 128:	00 01 00 00 03 01 06 01 09 01                       ..........

00000132 <digital_pin_to_port_PGM>:
 132:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
 142:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
 152:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
 162:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
 172:	0b 0b 0b 0b 0b 0b                                   ......

00000178 <digital_pin_to_bit_mask_PGM>:
 178:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
 188:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
 198:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
 1a8:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
 1b8:	04 08 10 20 40 80                                   ... @.

000001be <digital_pin_to_timer_PGM>:
 1be:	00 00 09 0a 02 08 0b 0c 0d 07 06 03 04 01 00 00     ................
	...
 1ea:	11 10 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000204 <__ctors_end>:
 204:	11 24       	eor	r1, r1
 206:	1f be       	out	0x3f, r1	; 63
 208:	cf ef       	ldi	r28, 0xFF	; 255
 20a:	d1 e2       	ldi	r29, 0x21	; 33
 20c:	de bf       	out	0x3e, r29	; 62
 20e:	cd bf       	out	0x3d, r28	; 61
 210:	00 e0       	ldi	r16, 0x00	; 0
 212:	0c bf       	out	0x3c, r16	; 60

00000214 <__do_copy_data>:
 214:	12 e0       	ldi	r17, 0x02	; 2
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b2 e0       	ldi	r27, 0x02	; 2
 21a:	e2 e9       	ldi	r30, 0x92	; 146
 21c:	f8 e0       	ldi	r31, 0x08	; 8
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a0 30       	cpi	r26, 0x00	; 0
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	12 e0       	ldi	r17, 0x02	; 2
 232:	a0 e0       	ldi	r26, 0x00	; 0
 234:	b2 e0       	ldi	r27, 0x02	; 2
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	a9 30       	cpi	r26, 0x09	; 9
 23c:	b1 07       	cpc	r27, r17
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	0e 94 6f 01 	call	0x2de	; 0x2de <main>
 244:	0c 94 47 04 	jmp	0x88e	; 0x88e <_exit>

00000248 <__bad_interrupt>:
 248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <loop>:
	pinMode(FRONT_LED,OUTPUT);
	pinMode(REAR_LED,OUTPUT);
}

// The loop function is called in an endless loop
void loop()
 24c:	0f 93       	push	r16
 24e:	1f 93       	push	r17
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
{
//Add your repeated code here
	int curFront=0,curRear=255;
	analogWrite(FRONT_LED,curFront);
 254:	8a e0       	ldi	r24, 0x0A	; 10
 256:	60 e0       	ldi	r22, 0x00	; 0
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	0e 94 81 02 	call	0x502	; 0x502 <analogWrite>
	analogWrite(REAR_LED,curRear);
 25e:	89 e0       	ldi	r24, 0x09	; 9
 260:	6f ef       	ldi	r22, 0xFF	; 255
 262:	70 e0       	ldi	r23, 0x00	; 0
 264:	0e 94 81 02 	call	0x502	; 0x502 <analogWrite>
 268:	c0 e0       	ldi	r28, 0x00	; 0
 26a:	d0 e0       	ldi	r29, 0x00	; 0

	for(int i=1;i<=255;i++){
		curFront++;
		curRear--;
		analogWrite(FRONT_LED,curFront);
		analogWrite(REAR_LED,curRear);
 26c:	0f ef       	ldi	r16, 0xFF	; 255
 26e:	10 e0       	ldi	r17, 0x00	; 0
	int curFront=0,curRear=255;
	analogWrite(FRONT_LED,curFront);
	analogWrite(REAR_LED,curRear);

	for(int i=1;i<=255;i++){
		curFront++;
 270:	21 96       	adiw	r28, 0x01	; 1
		curRear--;
		analogWrite(FRONT_LED,curFront);
 272:	8a e0       	ldi	r24, 0x0A	; 10
 274:	be 01       	movw	r22, r28
 276:	0e 94 81 02 	call	0x502	; 0x502 <analogWrite>
		analogWrite(REAR_LED,curRear);
 27a:	b8 01       	movw	r22, r16
 27c:	6c 1b       	sub	r22, r28
 27e:	7d 0b       	sbc	r23, r29
 280:	89 e0       	ldi	r24, 0x09	; 9
 282:	0e 94 81 02 	call	0x502	; 0x502 <analogWrite>
		delay(5000/255);
 286:	63 e1       	ldi	r22, 0x13	; 19
 288:	70 e0       	ldi	r23, 0x00	; 0
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 c6 01 	call	0x38c	; 0x38c <delay>
//Add your repeated code here
	int curFront=0,curRear=255;
	analogWrite(FRONT_LED,curFront);
	analogWrite(REAR_LED,curRear);

	for(int i=1;i<=255;i++){
 292:	cf 3f       	cpi	r28, 0xFF	; 255
 294:	d1 05       	cpc	r29, r1
 296:	61 f7       	brne	.-40     	; 0x270 <loop+0x24>

	for(int i=1;i<=255;i++){
			curFront--;
			curRear++;
			analogWrite(FRONT_LED,curFront);
			analogWrite(REAR_LED,curRear);
 298:	0f ef       	ldi	r16, 0xFF	; 255
 29a:	10 e0       	ldi	r17, 0x00	; 0
		analogWrite(REAR_LED,curRear);
		delay(5000/255);
	}

	for(int i=1;i<=255;i++){
			curFront--;
 29c:	21 97       	sbiw	r28, 0x01	; 1
			curRear++;
			analogWrite(FRONT_LED,curFront);
 29e:	8a e0       	ldi	r24, 0x0A	; 10
 2a0:	be 01       	movw	r22, r28
 2a2:	0e 94 81 02 	call	0x502	; 0x502 <analogWrite>
			analogWrite(REAR_LED,curRear);
 2a6:	b8 01       	movw	r22, r16
 2a8:	6c 1b       	sub	r22, r28
 2aa:	7d 0b       	sbc	r23, r29
 2ac:	89 e0       	ldi	r24, 0x09	; 9
 2ae:	0e 94 81 02 	call	0x502	; 0x502 <analogWrite>
			delay(5000/255);
 2b2:	63 e1       	ldi	r22, 0x13	; 19
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 c6 01 	call	0x38c	; 0x38c <delay>
		analogWrite(FRONT_LED,curFront);
		analogWrite(REAR_LED,curRear);
		delay(5000/255);
	}

	for(int i=1;i<=255;i++){
 2be:	20 97       	sbiw	r28, 0x00	; 0
 2c0:	69 f7       	brne	.-38     	; 0x29c <loop+0x50>
			curRear++;
			analogWrite(FRONT_LED,curFront);
			analogWrite(REAR_LED,curRear);
			delay(5000/255);
	}
}
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	1f 91       	pop	r17
 2c8:	0f 91       	pop	r16
 2ca:	08 95       	ret

000002cc <setup>:

//The setup function is called once at startup of the sketch
void setup()
{
// Add your initialization code here
	pinMode(FRONT_LED,OUTPUT);
 2cc:	8a e0       	ldi	r24, 0x0A	; 10
 2ce:	61 e0       	ldi	r22, 0x01	; 1
 2d0:	0e 94 61 03 	call	0x6c2	; 0x6c2 <pinMode>
	pinMode(REAR_LED,OUTPUT);
 2d4:	89 e0       	ldi	r24, 0x09	; 9
 2d6:	61 e0       	ldi	r22, 0x01	; 1
 2d8:	0e 94 61 03 	call	0x6c2	; 0x6c2 <pinMode>
}
 2dc:	08 95       	ret

000002de <main>:
#include <Arduino.h>

int main(void)
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
{
	init();
 2e2:	0e 94 1f 02 	call	0x43e	; 0x43e <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 2e6:	0e 94 66 01 	call	0x2cc	; 0x2cc <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 2ea:	c0 e0       	ldi	r28, 0x00	; 0
 2ec:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 2ee:	0e 94 26 01 	call	0x24c	; 0x24c <loop>
		if (serialEventRun) serialEventRun();
 2f2:	20 97       	sbiw	r28, 0x00	; 0
 2f4:	e1 f3       	breq	.-8      	; 0x2ee <main+0x10>
 2f6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 2fa:	f9 cf       	rjmp	.-14     	; 0x2ee <main+0x10>

000002fc <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 2fc:	1f 92       	push	r1
 2fe:	0f 92       	push	r0
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	0f 92       	push	r0
 304:	11 24       	eor	r1, r1
 306:	2f 93       	push	r18
 308:	3f 93       	push	r19
 30a:	8f 93       	push	r24
 30c:	9f 93       	push	r25
 30e:	af 93       	push	r26
 310:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 312:	80 91 04 02 	lds	r24, 0x0204
 316:	90 91 05 02 	lds	r25, 0x0205
 31a:	a0 91 06 02 	lds	r26, 0x0206
 31e:	b0 91 07 02 	lds	r27, 0x0207
	unsigned char f = timer0_fract;
 322:	30 91 08 02 	lds	r19, 0x0208

	m += MILLIS_INC;
 326:	01 96       	adiw	r24, 0x01	; 1
 328:	a1 1d       	adc	r26, r1
 32a:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
 32c:	23 2f       	mov	r18, r19
 32e:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
 330:	2d 37       	cpi	r18, 0x7D	; 125
 332:	20 f0       	brcs	.+8      	; 0x33c <__vector_23+0x40>
		f -= FRACT_MAX;
 334:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
 336:	01 96       	adiw	r24, 0x01	; 1
 338:	a1 1d       	adc	r26, r1
 33a:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 33c:	20 93 08 02 	sts	0x0208, r18
	timer0_millis = m;
 340:	80 93 04 02 	sts	0x0204, r24
 344:	90 93 05 02 	sts	0x0205, r25
 348:	a0 93 06 02 	sts	0x0206, r26
 34c:	b0 93 07 02 	sts	0x0207, r27
	timer0_overflow_count++;
 350:	80 91 00 02 	lds	r24, 0x0200
 354:	90 91 01 02 	lds	r25, 0x0201
 358:	a0 91 02 02 	lds	r26, 0x0202
 35c:	b0 91 03 02 	lds	r27, 0x0203
 360:	01 96       	adiw	r24, 0x01	; 1
 362:	a1 1d       	adc	r26, r1
 364:	b1 1d       	adc	r27, r1
 366:	80 93 00 02 	sts	0x0200, r24
 36a:	90 93 01 02 	sts	0x0201, r25
 36e:	a0 93 02 02 	sts	0x0202, r26
 372:	b0 93 03 02 	sts	0x0203, r27
}
 376:	bf 91       	pop	r27
 378:	af 91       	pop	r26
 37a:	9f 91       	pop	r25
 37c:	8f 91       	pop	r24
 37e:	3f 91       	pop	r19
 380:	2f 91       	pop	r18
 382:	0f 90       	pop	r0
 384:	0f be       	out	0x3f, r0	; 63
 386:	0f 90       	pop	r0
 388:	1f 90       	pop	r1
 38a:	18 95       	reti

0000038c <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
 38c:	9b 01       	movw	r18, r22
 38e:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 390:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
 392:	f8 94       	cli
	m = timer0_overflow_count;
 394:	80 91 00 02 	lds	r24, 0x0200
 398:	90 91 01 02 	lds	r25, 0x0201
 39c:	a0 91 02 02 	lds	r26, 0x0202
 3a0:	b0 91 03 02 	lds	r27, 0x0203
#if defined(TCNT0)
	t = TCNT0;
 3a4:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 3a6:	a8 9b       	sbis	0x15, 0	; 21
 3a8:	05 c0       	rjmp	.+10     	; 0x3b4 <delay+0x28>
 3aa:	6f 3f       	cpi	r22, 0xFF	; 255
 3ac:	19 f0       	breq	.+6      	; 0x3b4 <delay+0x28>
		m++;
 3ae:	01 96       	adiw	r24, 0x01	; 1
 3b0:	a1 1d       	adc	r26, r1
 3b2:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 3b4:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
 3b6:	ba 2f       	mov	r27, r26
 3b8:	a9 2f       	mov	r26, r25
 3ba:	98 2f       	mov	r25, r24
 3bc:	88 27       	eor	r24, r24
 3be:	86 0f       	add	r24, r22
 3c0:	91 1d       	adc	r25, r1
 3c2:	a1 1d       	adc	r26, r1
 3c4:	b1 1d       	adc	r27, r1
 3c6:	62 e0       	ldi	r22, 0x02	; 2
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	aa 1f       	adc	r26, r26
 3ce:	bb 1f       	adc	r27, r27
 3d0:	6a 95       	dec	r22
 3d2:	d1 f7       	brne	.-12     	; 0x3c8 <delay+0x3c>
 3d4:	bc 01       	movw	r22, r24
 3d6:	2d c0       	rjmp	.+90     	; 0x432 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 3d8:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
 3da:	f8 94       	cli
	m = timer0_overflow_count;
 3dc:	80 91 00 02 	lds	r24, 0x0200
 3e0:	90 91 01 02 	lds	r25, 0x0201
 3e4:	a0 91 02 02 	lds	r26, 0x0202
 3e8:	b0 91 03 02 	lds	r27, 0x0203
#if defined(TCNT0)
	t = TCNT0;
 3ec:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 3ee:	a8 9b       	sbis	0x15, 0	; 21
 3f0:	05 c0       	rjmp	.+10     	; 0x3fc <delay+0x70>
 3f2:	ef 3f       	cpi	r30, 0xFF	; 255
 3f4:	19 f0       	breq	.+6      	; 0x3fc <delay+0x70>
		m++;
 3f6:	01 96       	adiw	r24, 0x01	; 1
 3f8:	a1 1d       	adc	r26, r1
 3fa:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 3fc:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
 3fe:	ba 2f       	mov	r27, r26
 400:	a9 2f       	mov	r26, r25
 402:	98 2f       	mov	r25, r24
 404:	88 27       	eor	r24, r24
 406:	8e 0f       	add	r24, r30
 408:	91 1d       	adc	r25, r1
 40a:	a1 1d       	adc	r26, r1
 40c:	b1 1d       	adc	r27, r1
 40e:	e2 e0       	ldi	r30, 0x02	; 2
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	aa 1f       	adc	r26, r26
 416:	bb 1f       	adc	r27, r27
 418:	ea 95       	dec	r30
 41a:	d1 f7       	brne	.-12     	; 0x410 <delay+0x84>
 41c:	86 1b       	sub	r24, r22
 41e:	97 0b       	sbc	r25, r23
 420:	88 5e       	subi	r24, 0xE8	; 232
 422:	93 40       	sbci	r25, 0x03	; 3
 424:	c8 f2       	brcs	.-78     	; 0x3d8 <delay+0x4c>
			ms--;
 426:	21 50       	subi	r18, 0x01	; 1
 428:	30 40       	sbci	r19, 0x00	; 0
 42a:	40 40       	sbci	r20, 0x00	; 0
 42c:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
 42e:	68 51       	subi	r22, 0x18	; 24
 430:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
 432:	21 15       	cp	r18, r1
 434:	31 05       	cpc	r19, r1
 436:	41 05       	cpc	r20, r1
 438:	51 05       	cpc	r21, r1
 43a:	71 f6       	brne	.-100    	; 0x3d8 <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
 43c:	08 95       	ret

0000043e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 43e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 440:	84 b5       	in	r24, 0x24	; 36
 442:	82 60       	ori	r24, 0x02	; 2
 444:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 446:	84 b5       	in	r24, 0x24	; 36
 448:	81 60       	ori	r24, 0x01	; 1
 44a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 44c:	85 b5       	in	r24, 0x25	; 37
 44e:	82 60       	ori	r24, 0x02	; 2
 450:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 452:	85 b5       	in	r24, 0x25	; 37
 454:	81 60       	ori	r24, 0x01	; 1
 456:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 458:	ee e6       	ldi	r30, 0x6E	; 110
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	80 81       	ld	r24, Z
 45e:	81 60       	ori	r24, 0x01	; 1
 460:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 462:	e1 e8       	ldi	r30, 0x81	; 129
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 468:	80 81       	ld	r24, Z
 46a:	82 60       	ori	r24, 0x02	; 2
 46c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 46e:	80 81       	ld	r24, Z
 470:	81 60       	ori	r24, 0x01	; 1
 472:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 474:	e0 e8       	ldi	r30, 0x80	; 128
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	80 81       	ld	r24, Z
 47a:	81 60       	ori	r24, 0x01	; 1
 47c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 47e:	e1 eb       	ldi	r30, 0xB1	; 177
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	80 81       	ld	r24, Z
 484:	84 60       	ori	r24, 0x04	; 4
 486:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 488:	e0 eb       	ldi	r30, 0xB0	; 176
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	80 81       	ld	r24, Z
 48e:	81 60       	ori	r24, 0x01	; 1
 490:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
 492:	e1 e9       	ldi	r30, 0x91	; 145
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	80 81       	ld	r24, Z
 498:	82 60       	ori	r24, 0x02	; 2
 49a:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
 49c:	80 81       	ld	r24, Z
 49e:	81 60       	ori	r24, 0x01	; 1
 4a0:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
 4a2:	e0 e9       	ldi	r30, 0x90	; 144
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	80 81       	ld	r24, Z
 4a8:	81 60       	ori	r24, 0x01	; 1
 4aa:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
 4ac:	e1 ea       	ldi	r30, 0xA1	; 161
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	82 60       	ori	r24, 0x02	; 2
 4b4:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
 4b6:	80 81       	ld	r24, Z
 4b8:	81 60       	ori	r24, 0x01	; 1
 4ba:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
 4bc:	e0 ea       	ldi	r30, 0xA0	; 160
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	80 81       	ld	r24, Z
 4c2:	81 60       	ori	r24, 0x01	; 1
 4c4:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
 4c6:	e1 e2       	ldi	r30, 0x21	; 33
 4c8:	f1 e0       	ldi	r31, 0x01	; 1
 4ca:	80 81       	ld	r24, Z
 4cc:	82 60       	ori	r24, 0x02	; 2
 4ce:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
 4d0:	80 81       	ld	r24, Z
 4d2:	81 60       	ori	r24, 0x01	; 1
 4d4:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
 4d6:	e0 e2       	ldi	r30, 0x20	; 32
 4d8:	f1 e0       	ldi	r31, 0x01	; 1
 4da:	80 81       	ld	r24, Z
 4dc:	81 60       	ori	r24, 0x01	; 1
 4de:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 4e0:	ea e7       	ldi	r30, 0x7A	; 122
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	80 81       	ld	r24, Z
 4e6:	84 60       	ori	r24, 0x04	; 4
 4e8:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 4ea:	80 81       	ld	r24, Z
 4ec:	82 60       	ori	r24, 0x02	; 2
 4ee:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 4f0:	80 81       	ld	r24, Z
 4f2:	81 60       	ori	r24, 0x01	; 1
 4f4:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 4f6:	80 81       	ld	r24, Z
 4f8:	80 68       	ori	r24, 0x80	; 128
 4fa:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 4fc:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
 500:	08 95       	ret

00000502 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
 502:	1f 93       	push	r17
 504:	cf 93       	push	r28
 506:	df 93       	push	r29
 508:	18 2f       	mov	r17, r24
 50a:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
 50c:	61 e0       	ldi	r22, 0x01	; 1
 50e:	0e 94 61 03 	call	0x6c2	; 0x6c2 <pinMode>
	if (val == 0)
 512:	20 97       	sbiw	r28, 0x00	; 0
 514:	09 f4       	brne	.+2      	; 0x518 <analogWrite+0x16>
 516:	ca c0       	rjmp	.+404    	; 0x6ac <analogWrite+0x1aa>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
 518:	cf 3f       	cpi	r28, 0xFF	; 255
 51a:	d1 05       	cpc	r29, r1
 51c:	09 f4       	brne	.+2      	; 0x520 <analogWrite+0x1e>
 51e:	c9 c0       	rjmp	.+402    	; 0x6b2 <analogWrite+0x1b0>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
 520:	e1 2f       	mov	r30, r17
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	e2 54       	subi	r30, 0x42	; 66
 526:	fe 4f       	sbci	r31, 0xFE	; 254
 528:	84 91       	lpm	r24, Z+
 52a:	89 30       	cpi	r24, 0x09	; 9
 52c:	09 f4       	brne	.+2      	; 0x530 <analogWrite+0x2e>
 52e:	66 c0       	rjmp	.+204    	; 0x5fc <analogWrite+0xfa>
 530:	8a 30       	cpi	r24, 0x0A	; 10
 532:	b0 f4       	brcc	.+44     	; 0x560 <analogWrite+0x5e>
 534:	84 30       	cpi	r24, 0x04	; 4
 536:	f1 f1       	breq	.+124    	; 0x5b4 <analogWrite+0xb2>
 538:	85 30       	cpi	r24, 0x05	; 5
 53a:	40 f4       	brcc	.+16     	; 0x54c <analogWrite+0x4a>
 53c:	82 30       	cpi	r24, 0x02	; 2
 53e:	59 f1       	breq	.+86     	; 0x596 <analogWrite+0x94>
 540:	83 30       	cpi	r24, 0x03	; 3
 542:	70 f5       	brcc	.+92     	; 0x5a0 <analogWrite+0x9e>
 544:	81 30       	cpi	r24, 0x01	; 1
 546:	09 f0       	breq	.+2      	; 0x54a <analogWrite+0x48>
 548:	ae c0       	rjmp	.+348    	; 0x6a6 <analogWrite+0x1a4>
 54a:	20 c0       	rjmp	.+64     	; 0x58c <analogWrite+0x8a>
 54c:	87 30       	cpi	r24, 0x07	; 7
 54e:	09 f4       	brne	.+2      	; 0x552 <analogWrite+0x50>
 550:	43 c0       	rjmp	.+134    	; 0x5d8 <analogWrite+0xd6>
 552:	88 30       	cpi	r24, 0x08	; 8
 554:	08 f0       	brcs	.+2      	; 0x558 <analogWrite+0x56>
 556:	48 c0       	rjmp	.+144    	; 0x5e8 <analogWrite+0xe6>
 558:	86 30       	cpi	r24, 0x06	; 6
 55a:	09 f0       	breq	.+2      	; 0x55e <analogWrite+0x5c>
 55c:	a4 c0       	rjmp	.+328    	; 0x6a6 <analogWrite+0x1a4>
 55e:	34 c0       	rjmp	.+104    	; 0x5c8 <analogWrite+0xc6>
 560:	8d 30       	cpi	r24, 0x0D	; 13
 562:	09 f4       	brne	.+2      	; 0x566 <analogWrite+0x64>
 564:	78 c0       	rjmp	.+240    	; 0x656 <analogWrite+0x154>
 566:	8e 30       	cpi	r24, 0x0E	; 14
 568:	38 f4       	brcc	.+14     	; 0x578 <analogWrite+0x76>
 56a:	8b 30       	cpi	r24, 0x0B	; 11
 56c:	09 f4       	brne	.+2      	; 0x570 <analogWrite+0x6e>
 56e:	5a c0       	rjmp	.+180    	; 0x624 <analogWrite+0x122>
 570:	8c 30       	cpi	r24, 0x0C	; 12
 572:	08 f0       	brcs	.+2      	; 0x576 <analogWrite+0x74>
 574:	66 c0       	rjmp	.+204    	; 0x642 <analogWrite+0x140>
 576:	4c c0       	rjmp	.+152    	; 0x610 <analogWrite+0x10e>
 578:	80 31       	cpi	r24, 0x10	; 16
 57a:	09 f4       	brne	.+2      	; 0x57e <analogWrite+0x7c>
 57c:	80 c0       	rjmp	.+256    	; 0x67e <analogWrite+0x17c>
 57e:	81 31       	cpi	r24, 0x11	; 17
 580:	09 f4       	brne	.+2      	; 0x584 <analogWrite+0x82>
 582:	87 c0       	rjmp	.+270    	; 0x692 <analogWrite+0x190>
 584:	8f 30       	cpi	r24, 0x0F	; 15
 586:	09 f0       	breq	.+2      	; 0x58a <analogWrite+0x88>
 588:	8e c0       	rjmp	.+284    	; 0x6a6 <analogWrite+0x1a4>
 58a:	6f c0       	rjmp	.+222    	; 0x66a <analogWrite+0x168>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
 58c:	84 b5       	in	r24, 0x24	; 36
 58e:	80 68       	ori	r24, 0x80	; 128
 590:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
 592:	c7 bd       	out	0x27, r28	; 39
 594:	92 c0       	rjmp	.+292    	; 0x6ba <analogWrite+0x1b8>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
 596:	84 b5       	in	r24, 0x24	; 36
 598:	80 62       	ori	r24, 0x20	; 32
 59a:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
 59c:	c8 bd       	out	0x28, r28	; 40
 59e:	8d c0       	rjmp	.+282    	; 0x6ba <analogWrite+0x1b8>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
 5a0:	80 91 80 00 	lds	r24, 0x0080
 5a4:	80 68       	ori	r24, 0x80	; 128
 5a6:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
 5aa:	d0 93 89 00 	sts	0x0089, r29
 5ae:	c0 93 88 00 	sts	0x0088, r28
 5b2:	83 c0       	rjmp	.+262    	; 0x6ba <analogWrite+0x1b8>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
 5b4:	80 91 80 00 	lds	r24, 0x0080
 5b8:	80 62       	ori	r24, 0x20	; 32
 5ba:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
 5be:	d0 93 8b 00 	sts	0x008B, r29
 5c2:	c0 93 8a 00 	sts	0x008A, r28
 5c6:	79 c0       	rjmp	.+242    	; 0x6ba <analogWrite+0x1b8>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
 5c8:	80 91 b0 00 	lds	r24, 0x00B0
 5cc:	80 68       	ori	r24, 0x80	; 128
 5ce:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
 5d2:	c0 93 b3 00 	sts	0x00B3, r28
 5d6:	71 c0       	rjmp	.+226    	; 0x6ba <analogWrite+0x1b8>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
 5d8:	80 91 b0 00 	lds	r24, 0x00B0
 5dc:	80 62       	ori	r24, 0x20	; 32
 5de:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
 5e2:	c0 93 b4 00 	sts	0x00B4, r28
 5e6:	69 c0       	rjmp	.+210    	; 0x6ba <analogWrite+0x1b8>
			#endif

			#if defined(TCCR3A) && defined(COM3A1)
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				sbi(TCCR3A, COM3A1);
 5e8:	80 91 90 00 	lds	r24, 0x0090
 5ec:	80 68       	ori	r24, 0x80	; 128
 5ee:	80 93 90 00 	sts	0x0090, r24
				OCR3A = val; // set pwm duty
 5f2:	d0 93 99 00 	sts	0x0099, r29
 5f6:	c0 93 98 00 	sts	0x0098, r28
 5fa:	5f c0       	rjmp	.+190    	; 0x6ba <analogWrite+0x1b8>
			#endif

			#if defined(TCCR3A) && defined(COM3B1)
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				sbi(TCCR3A, COM3B1);
 5fc:	80 91 90 00 	lds	r24, 0x0090
 600:	80 62       	ori	r24, 0x20	; 32
 602:	80 93 90 00 	sts	0x0090, r24
				OCR3B = val; // set pwm duty
 606:	d0 93 9b 00 	sts	0x009B, r29
 60a:	c0 93 9a 00 	sts	0x009A, r28
 60e:	55 c0       	rjmp	.+170    	; 0x6ba <analogWrite+0x1b8>
			#endif

			#if defined(TCCR3A) && defined(COM3C1)
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				sbi(TCCR3A, COM3C1);
 610:	80 91 90 00 	lds	r24, 0x0090
 614:	88 60       	ori	r24, 0x08	; 8
 616:	80 93 90 00 	sts	0x0090, r24
				OCR3C = val; // set pwm duty
 61a:	d0 93 9d 00 	sts	0x009D, r29
 61e:	c0 93 9c 00 	sts	0x009C, r28
 622:	4b c0       	rjmp	.+150    	; 0x6ba <analogWrite+0x1b8>
			#endif

			#if defined(TCCR4A)
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				sbi(TCCR4A, COM4A1);
 624:	80 91 a0 00 	lds	r24, 0x00A0
 628:	80 68       	ori	r24, 0x80	; 128
 62a:	80 93 a0 00 	sts	0x00A0, r24
				#if defined(COM4A0)		// only used on 32U4
				cbi(TCCR4A, COM4A0);
 62e:	80 91 a0 00 	lds	r24, 0x00A0
 632:	8f 7b       	andi	r24, 0xBF	; 191
 634:	80 93 a0 00 	sts	0x00A0, r24
				#endif
				OCR4A = val;	// set pwm duty
 638:	d0 93 a9 00 	sts	0x00A9, r29
 63c:	c0 93 a8 00 	sts	0x00A8, r28
 640:	3c c0       	rjmp	.+120    	; 0x6ba <analogWrite+0x1b8>
			#endif
			
			#if defined(TCCR4A) && defined(COM4B1)
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				sbi(TCCR4A, COM4B1);
 642:	80 91 a0 00 	lds	r24, 0x00A0
 646:	80 62       	ori	r24, 0x20	; 32
 648:	80 93 a0 00 	sts	0x00A0, r24
				OCR4B = val; // set pwm duty
 64c:	d0 93 ab 00 	sts	0x00AB, r29
 650:	c0 93 aa 00 	sts	0x00AA, r28
 654:	32 c0       	rjmp	.+100    	; 0x6ba <analogWrite+0x1b8>
			#endif

			#if defined(TCCR4A) && defined(COM4C1)
			case TIMER4C:
				// connect pwm to pin on timer 4, channel C
				sbi(TCCR4A, COM4C1);
 656:	80 91 a0 00 	lds	r24, 0x00A0
 65a:	88 60       	ori	r24, 0x08	; 8
 65c:	80 93 a0 00 	sts	0x00A0, r24
				OCR4C = val; // set pwm duty
 660:	d0 93 ad 00 	sts	0x00AD, r29
 664:	c0 93 ac 00 	sts	0x00AC, r28
 668:	28 c0       	rjmp	.+80     	; 0x6ba <analogWrite+0x1b8>

							
			#if defined(TCCR5A) && defined(COM5A1)
			case TIMER5A:
				// connect pwm to pin on timer 5, channel A
				sbi(TCCR5A, COM5A1);
 66a:	80 91 20 01 	lds	r24, 0x0120
 66e:	80 68       	ori	r24, 0x80	; 128
 670:	80 93 20 01 	sts	0x0120, r24
				OCR5A = val; // set pwm duty
 674:	d0 93 29 01 	sts	0x0129, r29
 678:	c0 93 28 01 	sts	0x0128, r28
 67c:	1e c0       	rjmp	.+60     	; 0x6ba <analogWrite+0x1b8>
			#endif

			#if defined(TCCR5A) && defined(COM5B1)
			case TIMER5B:
				// connect pwm to pin on timer 5, channel B
				sbi(TCCR5A, COM5B1);
 67e:	80 91 20 01 	lds	r24, 0x0120
 682:	80 62       	ori	r24, 0x20	; 32
 684:	80 93 20 01 	sts	0x0120, r24
				OCR5B = val; // set pwm duty
 688:	d0 93 2b 01 	sts	0x012B, r29
 68c:	c0 93 2a 01 	sts	0x012A, r28
 690:	14 c0       	rjmp	.+40     	; 0x6ba <analogWrite+0x1b8>
			#endif

			#if defined(TCCR5A) && defined(COM5C1)
			case TIMER5C:
				// connect pwm to pin on timer 5, channel C
				sbi(TCCR5A, COM5C1);
 692:	80 91 20 01 	lds	r24, 0x0120
 696:	88 60       	ori	r24, 0x08	; 8
 698:	80 93 20 01 	sts	0x0120, r24
				OCR5C = val; // set pwm duty
 69c:	d0 93 2d 01 	sts	0x012D, r29
 6a0:	c0 93 2c 01 	sts	0x012C, r28
 6a4:	0a c0       	rjmp	.+20     	; 0x6ba <analogWrite+0x1b8>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
 6a6:	c0 38       	cpi	r28, 0x80	; 128
 6a8:	d1 05       	cpc	r29, r1
 6aa:	1c f4       	brge	.+6      	; 0x6b2 <analogWrite+0x1b0>
					digitalWrite(pin, LOW);
 6ac:	81 2f       	mov	r24, r17
 6ae:	60 e0       	ldi	r22, 0x00	; 0
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <analogWrite+0x1b4>
				} else {
					digitalWrite(pin, HIGH);
 6b2:	81 2f       	mov	r24, r17
 6b4:	61 e0       	ldi	r22, 0x01	; 1
 6b6:	0e 94 14 04 	call	0x828	; 0x828 <digitalWrite>
				}
		}
	}
}
 6ba:	df 91       	pop	r29
 6bc:	cf 91       	pop	r28
 6be:	1f 91       	pop	r17
 6c0:	08 95       	ret

000006c2 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 6c2:	cf 93       	push	r28
 6c4:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 6c6:	48 2f       	mov	r20, r24
 6c8:	50 e0       	ldi	r21, 0x00	; 0
 6ca:	ca 01       	movw	r24, r20
 6cc:	88 58       	subi	r24, 0x88	; 136
 6ce:	9e 4f       	sbci	r25, 0xFE	; 254
 6d0:	fc 01       	movw	r30, r24
 6d2:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
 6d4:	4e 5c       	subi	r20, 0xCE	; 206
 6d6:	5e 4f       	sbci	r21, 0xFE	; 254
 6d8:	fa 01       	movw	r30, r20
 6da:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 6dc:	88 23       	and	r24, r24
 6de:	69 f1       	breq	.+90     	; 0x73a <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	88 0f       	add	r24, r24
 6e4:	99 1f       	adc	r25, r25
 6e6:	fc 01       	movw	r30, r24
 6e8:	ec 51       	subi	r30, 0x1C	; 28
 6ea:	ff 4f       	sbci	r31, 0xFF	; 255
 6ec:	a5 91       	lpm	r26, Z+
 6ee:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
 6f0:	fc 01       	movw	r30, r24
 6f2:	e2 50       	subi	r30, 0x02	; 2
 6f4:	ff 4f       	sbci	r31, 0xFF	; 255
 6f6:	c5 91       	lpm	r28, Z+
 6f8:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
 6fa:	66 23       	and	r22, r22
 6fc:	51 f4       	brne	.+20     	; 0x712 <pinMode+0x50>
		uint8_t oldSREG = SREG;
 6fe:	2f b7       	in	r18, 0x3f	; 63
                cli();
 700:	f8 94       	cli
		*reg &= ~bit;
 702:	8c 91       	ld	r24, X
 704:	93 2f       	mov	r25, r19
 706:	90 95       	com	r25
 708:	89 23       	and	r24, r25
 70a:	8c 93       	st	X, r24
		*out &= ~bit;
 70c:	88 81       	ld	r24, Y
 70e:	89 23       	and	r24, r25
 710:	0b c0       	rjmp	.+22     	; 0x728 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 712:	62 30       	cpi	r22, 0x02	; 2
 714:	61 f4       	brne	.+24     	; 0x72e <pinMode+0x6c>
		uint8_t oldSREG = SREG;
 716:	2f b7       	in	r18, 0x3f	; 63
                cli();
 718:	f8 94       	cli
		*reg &= ~bit;
 71a:	8c 91       	ld	r24, X
 71c:	93 2f       	mov	r25, r19
 71e:	90 95       	com	r25
 720:	89 23       	and	r24, r25
 722:	8c 93       	st	X, r24
		*out |= bit;
 724:	88 81       	ld	r24, Y
 726:	83 2b       	or	r24, r19
 728:	88 83       	st	Y, r24
		SREG = oldSREG;
 72a:	2f bf       	out	0x3f, r18	; 63
 72c:	06 c0       	rjmp	.+12     	; 0x73a <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
 72e:	9f b7       	in	r25, 0x3f	; 63
                cli();
 730:	f8 94       	cli
		*reg |= bit;
 732:	8c 91       	ld	r24, X
 734:	83 2b       	or	r24, r19
 736:	8c 93       	st	X, r24
		SREG = oldSREG;
 738:	9f bf       	out	0x3f, r25	; 63
	}
}
 73a:	df 91       	pop	r29
 73c:	cf 91       	pop	r28
 73e:	08 95       	ret

00000740 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 740:	89 30       	cpi	r24, 0x09	; 9
 742:	09 f4       	brne	.+2      	; 0x746 <turnOffPWM+0x6>
 744:	49 c0       	rjmp	.+146    	; 0x7d8 <turnOffPWM+0x98>
 746:	8a 30       	cpi	r24, 0x0A	; 10
 748:	a0 f4       	brcc	.+40     	; 0x772 <turnOffPWM+0x32>
 74a:	84 30       	cpi	r24, 0x04	; 4
 74c:	51 f1       	breq	.+84     	; 0x7a2 <turnOffPWM+0x62>
 74e:	85 30       	cpi	r24, 0x05	; 5
 750:	40 f4       	brcc	.+16     	; 0x762 <turnOffPWM+0x22>
 752:	82 30       	cpi	r24, 0x02	; 2
 754:	79 f1       	breq	.+94     	; 0x7b4 <turnOffPWM+0x74>
 756:	83 30       	cpi	r24, 0x03	; 3
 758:	00 f5       	brcc	.+64     	; 0x79a <turnOffPWM+0x5a>
 75a:	81 30       	cpi	r24, 0x01	; 1
 75c:	09 f0       	breq	.+2      	; 0x760 <turnOffPWM+0x20>
 75e:	63 c0       	rjmp	.+198    	; 0x826 <turnOffPWM+0xe6>
 760:	26 c0       	rjmp	.+76     	; 0x7ae <turnOffPWM+0x6e>
 762:	87 30       	cpi	r24, 0x07	; 7
 764:	79 f1       	breq	.+94     	; 0x7c4 <turnOffPWM+0x84>
 766:	88 30       	cpi	r24, 0x08	; 8
 768:	98 f5       	brcc	.+102    	; 0x7d0 <turnOffPWM+0x90>
 76a:	86 30       	cpi	r24, 0x06	; 6
 76c:	09 f0       	breq	.+2      	; 0x770 <turnOffPWM+0x30>
 76e:	5b c0       	rjmp	.+182    	; 0x826 <turnOffPWM+0xe6>
 770:	25 c0       	rjmp	.+74     	; 0x7bc <turnOffPWM+0x7c>
 772:	8d 30       	cpi	r24, 0x0D	; 13
 774:	09 f4       	brne	.+2      	; 0x778 <turnOffPWM+0x38>
 776:	42 c0       	rjmp	.+132    	; 0x7fc <turnOffPWM+0xbc>
 778:	8e 30       	cpi	r24, 0x0E	; 14
 77a:	28 f4       	brcc	.+10     	; 0x786 <turnOffPWM+0x46>
 77c:	8b 30       	cpi	r24, 0x0B	; 11
 77e:	b1 f1       	breq	.+108    	; 0x7ec <turnOffPWM+0xac>
 780:	8c 30       	cpi	r24, 0x0C	; 12
 782:	c0 f5       	brcc	.+112    	; 0x7f4 <turnOffPWM+0xb4>
 784:	2d c0       	rjmp	.+90     	; 0x7e0 <turnOffPWM+0xa0>
 786:	80 31       	cpi	r24, 0x10	; 16
 788:	09 f4       	brne	.+2      	; 0x78c <turnOffPWM+0x4c>
 78a:	42 c0       	rjmp	.+132    	; 0x810 <turnOffPWM+0xd0>
 78c:	81 31       	cpi	r24, 0x11	; 17
 78e:	09 f4       	brne	.+2      	; 0x792 <turnOffPWM+0x52>
 790:	45 c0       	rjmp	.+138    	; 0x81c <turnOffPWM+0xdc>
 792:	8f 30       	cpi	r24, 0x0F	; 15
 794:	09 f0       	breq	.+2      	; 0x798 <turnOffPWM+0x58>
 796:	47 c0       	rjmp	.+142    	; 0x826 <turnOffPWM+0xe6>
 798:	37 c0       	rjmp	.+110    	; 0x808 <turnOffPWM+0xc8>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 79a:	80 91 80 00 	lds	r24, 0x0080
 79e:	8f 77       	andi	r24, 0x7F	; 127
 7a0:	03 c0       	rjmp	.+6      	; 0x7a8 <turnOffPWM+0x68>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 7a2:	80 91 80 00 	lds	r24, 0x0080
 7a6:	8f 7d       	andi	r24, 0xDF	; 223
 7a8:	80 93 80 00 	sts	0x0080, r24
 7ac:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 7ae:	84 b5       	in	r24, 0x24	; 36
 7b0:	8f 77       	andi	r24, 0x7F	; 127
 7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <turnOffPWM+0x78>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 7b4:	84 b5       	in	r24, 0x24	; 36
 7b6:	8f 7d       	andi	r24, 0xDF	; 223
 7b8:	84 bd       	out	0x24, r24	; 36
 7ba:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 7bc:	80 91 b0 00 	lds	r24, 0x00B0
 7c0:	8f 77       	andi	r24, 0x7F	; 127
 7c2:	03 c0       	rjmp	.+6      	; 0x7ca <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 7c4:	80 91 b0 00 	lds	r24, 0x00B0
 7c8:	8f 7d       	andi	r24, 0xDF	; 223
 7ca:	80 93 b0 00 	sts	0x00B0, r24
 7ce:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
 7d0:	80 91 90 00 	lds	r24, 0x0090
 7d4:	8f 77       	andi	r24, 0x7F	; 127
 7d6:	07 c0       	rjmp	.+14     	; 0x7e6 <turnOffPWM+0xa6>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
 7d8:	80 91 90 00 	lds	r24, 0x0090
 7dc:	8f 7d       	andi	r24, 0xDF	; 223
 7de:	03 c0       	rjmp	.+6      	; 0x7e6 <turnOffPWM+0xa6>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
 7e0:	80 91 90 00 	lds	r24, 0x0090
 7e4:	87 7f       	andi	r24, 0xF7	; 247
 7e6:	80 93 90 00 	sts	0x0090, r24
 7ea:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
 7ec:	80 91 a0 00 	lds	r24, 0x00A0
 7f0:	8f 77       	andi	r24, 0x7F	; 127
 7f2:	07 c0       	rjmp	.+14     	; 0x802 <turnOffPWM+0xc2>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
 7f4:	80 91 a0 00 	lds	r24, 0x00A0
 7f8:	8f 7d       	andi	r24, 0xDF	; 223
 7fa:	03 c0       	rjmp	.+6      	; 0x802 <turnOffPWM+0xc2>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
 7fc:	80 91 a0 00 	lds	r24, 0x00A0
 800:	87 7f       	andi	r24, 0xF7	; 247
 802:	80 93 a0 00 	sts	0x00A0, r24
 806:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
 808:	80 91 20 01 	lds	r24, 0x0120
 80c:	8f 77       	andi	r24, 0x7F	; 127
 80e:	03 c0       	rjmp	.+6      	; 0x816 <turnOffPWM+0xd6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
 810:	80 91 20 01 	lds	r24, 0x0120
 814:	8f 7d       	andi	r24, 0xDF	; 223
 816:	80 93 20 01 	sts	0x0120, r24
 81a:	08 95       	ret
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
 81c:	80 91 20 01 	lds	r24, 0x0120
 820:	87 7f       	andi	r24, 0xF7	; 247
 822:	80 93 20 01 	sts	0x0120, r24
 826:	08 95       	ret

00000828 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 828:	ff 92       	push	r15
 82a:	0f 93       	push	r16
 82c:	1f 93       	push	r17
 82e:	f6 2e       	mov	r15, r22
	uint8_t timer = digitalPinToTimer(pin);
 830:	48 2f       	mov	r20, r24
 832:	50 e0       	ldi	r21, 0x00	; 0
 834:	ca 01       	movw	r24, r20
 836:	82 54       	subi	r24, 0x42	; 66
 838:	9e 4f       	sbci	r25, 0xFE	; 254
 83a:	fc 01       	movw	r30, r24
 83c:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
 83e:	ca 01       	movw	r24, r20
 840:	88 58       	subi	r24, 0x88	; 136
 842:	9e 4f       	sbci	r25, 0xFE	; 254
 844:	fc 01       	movw	r30, r24
 846:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
 848:	4e 5c       	subi	r20, 0xCE	; 206
 84a:	5e 4f       	sbci	r21, 0xFE	; 254
 84c:	fa 01       	movw	r30, r20
 84e:	04 91       	lpm	r16, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 850:	00 23       	and	r16, r16
 852:	c9 f0       	breq	.+50     	; 0x886 <digitalWrite+0x5e>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 854:	22 23       	and	r18, r18
 856:	19 f0       	breq	.+6      	; 0x85e <digitalWrite+0x36>
 858:	82 2f       	mov	r24, r18
 85a:	0e 94 a0 03 	call	0x740	; 0x740 <turnOffPWM>

	out = portOutputRegister(port);
 85e:	e0 2f       	mov	r30, r16
 860:	f0 e0       	ldi	r31, 0x00	; 0
 862:	ee 0f       	add	r30, r30
 864:	ff 1f       	adc	r31, r31
 866:	e2 50       	subi	r30, 0x02	; 2
 868:	ff 4f       	sbci	r31, 0xFF	; 255
 86a:	a5 91       	lpm	r26, Z+
 86c:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
 86e:	9f b7       	in	r25, 0x3f	; 63
	cli();
 870:	f8 94       	cli

	if (val == LOW) {
 872:	ff 20       	and	r15, r15
 874:	21 f4       	brne	.+8      	; 0x87e <digitalWrite+0x56>
		*out &= ~bit;
 876:	8c 91       	ld	r24, X
 878:	10 95       	com	r17
 87a:	81 23       	and	r24, r17
 87c:	02 c0       	rjmp	.+4      	; 0x882 <digitalWrite+0x5a>
	} else {
		*out |= bit;
 87e:	8c 91       	ld	r24, X
 880:	81 2b       	or	r24, r17
 882:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
 884:	9f bf       	out	0x3f, r25	; 63
}
 886:	1f 91       	pop	r17
 888:	0f 91       	pop	r16
 88a:	ff 90       	pop	r15
 88c:	08 95       	ret

0000088e <_exit>:
 88e:	f8 94       	cli

00000890 <__stop_program>:
 890:	ff cf       	rjmp	.-2      	; 0x890 <__stop_program>
